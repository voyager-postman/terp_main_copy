 import jsPDF from "jspdf";
import "jspdf-autotable";
// import logo from "../../assets/logoT.jpg";
import { useLocation } from "react-router-dom";
import { useEffect, useState } from "react";
import axios from "axios";
import { API_BASE_URL } from "../../Url/Url";
import { API_IMAGE_URL } from "../../Url/Url";

const QuotationProforma = () => {
  const [companyAddress, setCompanyAddress] = useState("");
  const [data, setData] = useState("");
  const [totalDetails, setTotalDetails] = useState("");
  const [headerData, setHeaderData] = useState("");
  const [useAgreedPricing, setUseAgreedPricing] = useState(false);
  const [itemDetails, setItemDetails] = useState(false);
  const [exchangeRate, setExchangeRate] = useState(false);
  const [messageSet1, setMassageSet1] = useState("");
  const [messageSet, setMassageSet] = useState("");
  const [cbm, setCbm] = useState(true);
  const [selectedInvoice, setSelectedInvoice] = useState("Client");
  const [tableData, setTableData] = useState([]);
  const location = useLocation();
  const { from } = location.state || {};
  console.log(from);
  const getOrdersDetails = () => {
    axios
      .get(`${API_BASE_URL}/quotation_proforma`, {
        params: {
          quotation_id: from?.quotation_id,
        },
      })
      .then((response) => {
        console.log(response);
        setTableData(response?.data?.data);
        setTotalDetails(response?.data?.quotationFinance);
        setData(from);
        setCompanyAddress(response?.data?.Company_Address);
        setHeaderData(response?.data?.invoice_header);
      })
      .catch((e) => {
        console.log(e);
      });
  };

  const dynamicMessage = () => {
    axios
      .post(`${API_BASE_URL}/quotation_delivery_terms`, {
        quotation_id: from?.quotation_id,
      })
      .then((response) => {
        if (response.data.success === true) {
          setMassageSet(response.data.message);
        }
        console.log(response);
      })
      .catch((error) => {
        console.log(error);
        if (error.response.status === 400) {
          setMassageSet(error.response.data.message);
        }
      });
  };
  const delivery = () => {
    axios
      .post(`${API_BASE_URL}/quotation_pdf_delivery_by  `, {
        quotation_id: from?.quotation_id,
      })
      .then((response) => {
        if (response.data.success === true) {
          setMassageSet1(response.data.message);
        }
        console.log(response.status);
      })
      .catch((error) => {
        console.log(error);
        if (error.response.status === 400) {
          setMassageSet1(error.response.data.message);
        }

        return false;
      });
  };
  const pdfAllData = () => {
    axios
      .post(`${API_BASE_URL}/InvoicePdfDetails`, {
        order_id: from?.order_id,
        invoice_id: from?.Invoice_id,
      })
      .then((response) => {
        console.log(response.data);
        setData(from);

        setTableData(response?.data?.InvoiceDetails);
        setTotalDetails(response?.data?.TotalDetails);
        setHeaderData(response?.data?.invoice_header);
      })
      .catch((error) => {
        console.log(error);
        toast.error("Network Error", {
          autoClose: 1000,
          theme: "colored",
        });
        return false;
      });
  };
  console.log(data);
  useEffect(() => {
    pdfAllData();
    dynamicMessage();
    getOrdersDetails();
    delivery();
  }, []);
  const handleAgreedPricingChange = (e) => {
    setUseAgreedPricing(e.target.checked);
    console.log(useAgreedPricing);
    pdfAllData();
  };
  const handleAgreedPricingChange1 = (e) => {
    setItemDetails(e.target.checked);
    console.log(itemDetails);
    pdfAllData();
  };
  const handleAgreedPricingChange2 = (e) => {
    setCbm(e.target.checked);
    console.log(cbm);
    pdfAllData();
  };

  const handleAgreedPricingChange3 = (e) => {
    setExchangeRate(e.target.checked);
    console.log(exchangeRate);
    pdfAllData();
  };
  const clearData = () => {
    setUseAgreedPricing(false);
    setItemDetails(false);
    setCbm(true);
    setExchangeRate(false);
    setSelectedInvoice("Client");
  };
  const handleRadioChange = (event) => {
    setSelectedInvoice(event.target.value);
  };

  const generatePdf = async () => {
    const doc = new jsPDF();
    const convertImageToBase64 = (url) => {
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.crossOrigin = "Anonymous";
        img.src = url;
        img.onload = () => {
          const canvas = document.createElement("canvas");
          canvas.width = img.width;
          canvas.height = img.height;
          const ctx = canvas.getContext("2d");
          ctx.drawImage(img, 0, 0);
          const dataURL = canvas.toDataURL("image/png");
          resolve(dataURL);
        };
        img.onerror = (error) => reject(error);
      });
    };

    const addLogoWithDetails = async () => {
      // const logoData = await convertImageToBase64(logo);
      // doc.addImage(logoData, "PNG", 6, 3, 20, 20); // Adjust the position and size as needed
      // logo end
      // doc.setFontSize(12);
      // doc.setTextColor(0, 0, 0);
      // doc.text(`${companyAddress?.Line_1}`, 30, 8);
      // doc.setFontSize(10);
      // doc.setTextColor(0, 0, 0);
      // doc.text(`${companyAddress?.Line_2}`, 30, 12);
      // const longTextOne = `${companyAddress?.Line_3}`;
      // const maxWidthOne = 90;
      // const linesOne = doc.splitTextToSize(longTextOne, maxWidthOne);
      // let startXOne = 30;
      // let startYOne = 16;
      // linesOne.forEach((lineOne, index) => {
      //   doc.text(lineOne, startXOne, startYOne + index * 4.2); // Adjust the line height (10) as needed
      // });

      doc.setFontSize(17);
      doc.setTextColor(0, 0, 0);
      doc.text(`Statement`, 125, 11.5);
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.setTextColor(0, 0, 0);
      doc.text(`Start Date: 2020/01/01`, 166.5, 9);
      doc.text(`End date: 2020/02/01`, 166.5, 13);
      doc.text(`Printed On : 2020/02/01`, 166.5, 17);

    };
    doc.setFillColor(32, 55, 100);
    doc.rect(7, 19, doc.internal.pageSize.width - 15, 0.5, "FD");
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(12);
    doc.text("Invoice to", 7, 24);
    doc.text("Consignee Details", 127.2, 24);

    doc.setFillColor(32, 55, 100);
    doc.setFontSize(11);
    doc.setTextColor(0, 0, 0);
    function renderWrappedText1(
      doc,
      text,
      startX,
      startY,
      maxWidth,
      lineHeight
    ) {
      const lines = doc.splitTextToSize(text, maxWidth);
      lines.forEach((line, index) => {
        doc.text(line, startX, startY + index * lineHeight);
      });
      return startY + lines.length * lineHeight; // Return the new Y position after rendering the text
    }

    function renderWrappedText2(
      doc,
      text,
      startX,
      startY,
      maxWidth,
      lineHeight
    ) {
      const lines = doc.splitTextToSize(text, maxWidth);
      lines.forEach((line, index) => {
        doc.text(line, startX, startY + index * lineHeight);
      });
      return startY + lines.length * lineHeight; // Return the new Y position after rendering the text
    }

    // First set of texts
    const maxWidth1 = 72;
    const startX1 = 7;
    let startY1 = 29;
    const lineHeight1 = 4.2;
    const longText1_1 = `${data?.client_name}(${data?.client_tax_number})`;
    const longText1_2 = `${data?.client_address}`;
    const longText1_3 = `${data?.client_email} / ${data?.client_phone}`;

    startY1 = renderWrappedText1(
      doc,
      longText1_1,
      startX1,
      startY1,
      maxWidth1,
      lineHeight1
    );
    doc.setFontSize(10);
    startY1 = renderWrappedText1(
      doc,
      longText1_2,
      startX1,
      startY1,
      maxWidth1,
      lineHeight1
    );
    startY1 = renderWrappedText1(
      doc,
      longText1_3,
      startX1,
      startY1,
      maxWidth1,
      lineHeight1
    );

    // Consignee detail
    const maxWidth2 = 72;
    const startX2 = 127.2;
    let startY2 = 29;
    const lineHeight2 = 4.2;
    doc.setFontSize(11);

    const longText2_1 = `${data?.consignee_name}(${data?.consignee_tax_number})`;
    const longText2_2 = `${data?.consignee_address}`;
    const longText2_3 = `${data?.consignee_email}/${data?.consignee_phone}`;

    startY2 = renderWrappedText2(
      doc,
      longText2_1,
      startX2,
      startY2,
      maxWidth2,
      lineHeight2
    );
    doc.setFontSize(10);
    startY2 = renderWrappedText2(
      doc,
      longText2_2,
      startX2,
      startY2,
      maxWidth2,
      lineHeight2
    );
    startY2 = renderWrappedText2(
      doc,
      longText2_3,
      startX2,
      startY2,
      maxWidth2,
      lineHeight2
    );

    const formatterNg = new Intl.NumberFormat("en-US", {
      style: "decimal",
      minimumFractionDigits: 3,
    });
    const formatterNo = new Intl.NumberFormat("en-US", {
      style: "decimal",
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    });
    doc.setFontSize(10);
    doc.setFont("helvetica", "bold");
    doc.text("Pre Statement", 7, 60);
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.text("Invoices : ", 7, 65);
    doc.text(formatter.format(32423.32423), 24, 65);
    doc.text("Claim : ", 58, 65);
    doc.text(formatter.format(124.4543), 71, 65);
    doc.text("Payment : ", 100, 65);
    doc.text(formatter.format(7200.2131), 119, 65);
    doc.text("Total : ", 150, 65);
    doc.text(formatter.format(4923.3432), 162, 65);
    await addLogoWithDetails();
    let yTop = 67;
    const columns = [
      { header: "Date", dataKey: "index" },
      { header: " AWB / BL", dataKey: "HS_CODE" },
      { header: " Transaction Ref ", dataKey: "net_weight" },
      { header: "Currency", dataKey: "Number_of_boxes" },
      { header: "Invoiced Amount", dataKey: "itf_name_en" },
      { header: "Paid Amount", dataKey: "itf_quantity" },
      { header: "Client Reference", dataKey: "unit_name_en" },
      { header: " TT Reference", dataKey: "calculated_price" },
    ];

    const rows = tableData.map((item, index) => ({
      index: "02-07-2024",
      HS_CODE: "***",
      net_weight: "INV-202407001",
      Number_of_boxes: "USD",
      itf_name_en: formatter.format("3224.32432"),
      itf_quantity: formatter.format("2344.454"),
      unit_name_en: item.unit_name_en,
      calculated_price: "FGT064-2024",
    }));

    doc.autoTable({
      head: [columns.map((col) => col.header)],
      body: rows.map((row) => columns.map((col) => row[col.dataKey])),
      startY: yTop,
      headStyles: {
        fillColor: "#203764",
        textColor: "#FFFFFF",
        halign: "center",
      },
      bodyStyles: {
        valign: "top",
      },
      styles: {
        overflow: "linebreak",
        textColor: "#000000",
        cellWidth: "wrap",
        valign: "middle",
        lineWidth: 0.1,
        lineColor: "#203764",
      },
      margin: {
        left: 7,
        right: 7,
      },
      tableWidth: "auto", // Adjust to ensure the table fits within the page
      columnStyles: {
        0: { halign: "left", },
        1: { halign: "left", cellWidth: 20, overflow: "linebreak" },
        2: { halign: "left", cellWidth: 30, overflow: "linebreak" },
        3: { halign: "center", },
        4: { halign: "right", cellWidth: 20 },
        5: { halign: "right" },
        6: { halign: "right", cellWidth: 30, overflow: "linebreak" },
        7: { halign: "right", cellWidth: 30, overflow: "linebreak" },
      },
    });

    yTop = doc.autoTable.previous.finalY + 1;
    const finalY = doc.autoTable.previous.finalY + 4;
    // middle part

    const valueWidth = 20; // Set the fixed width for the value column

    doc.setFontSize(10);
    doc.setTextColor(0, 0, 0);
    
    // Invoices
    doc.text(`Invoices :  `, 75, finalY + 1);
    doc.text(
      formatter.format(3324322),
      105 + valueWidth - doc.getTextWidth(formatter.format(3324322)),
      finalY + 1
    );
    
    // Claims
    doc.text(`Claims :`, 75, finalY + 5);
    doc.text(
      formatter.format(32423.45454),
      105 + valueWidth - doc.getTextWidth(formatter.format(32423.45454)), 
      finalY + 5
    );
    
    // Payments
    doc.text(`Payments :`, 75, finalY + 9);
    doc.text(
      formatter.format(234.3242),
      105 + valueWidth - doc.getTextWidth(formatter.format(234.3242)),
      finalY + 9
    );
    
    // Line
    doc.rect(75, finalY + 11, 50, 0.5, "FD");
    
    // Total
    doc.text("Total :", 75, finalY + 16);
    doc.text(
      formatter.format(234.324),
      105 + valueWidth - doc.getTextWidth(formatter.format(234.324)),
      finalY + 16
    );
    

    // bottom part
    doc.setFont("helvetica", "bold");
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(10);
    doc.setFont("helvetica", "bold");
    doc.text("Total History", 7, finalY + 20);
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.text("Invoices : ", 7, finalY + 24);
    doc.text(formatter.format(40390.3523), 24, finalY + 24);
    doc.text("Claim : ", 58, finalY + 24);
    doc.text(formatter.format(127.3242), 71, finalY + 24);
    doc.text("Payment : ", 100, finalY + 24);
    doc.text(formatter.format(1800.54645), 119, finalY + 24);
    doc.text("Total : ", 150, finalY + 24);
    doc.text(formatter.format(22263.335), 162, finalY + 24);
    // page number
    doc.setFontSize(10);
    doc.setTextColor(0, 0, 0);
    const addPageNumbers = (doc) => {
      const pageCount = doc.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.text(`${i} out  of ${pageCount}`, 185.2, 3.1);
      }
    };
    // Add page numbers
    addPageNumbers(doc);
    const pdfBlob = doc.output("blob");
    // Upload the PDF to the server
    await uploadPDF(pdfBlob);
  };
  const uploadPDF = async (pdfBlob) => {
    const formData = new FormData();
    formData.append(
      "document",
      pdfBlob,
      `${from?.Quotation_number || "default"}_Proforma_${formatDate(
        new Date()
      )}.pdf`
    );
    try {
      const response = await axios.post(`${API_BASE_URL}/UploadPdf`, formData);
      console.log(response);
      if (response.data.success) {
        console.log("PDF uploaded successfully");
        window.open(
          `${API_IMAGE_URL}${from?.Quotation_number}_Proforma_${formatDate(
            new Date()
          )}.pdf`
        );
      } else {
        console.log("Failed to upload PDF");
      }
    } catch (error) {
      console.error("Error uploading PDF:", error);
    }
  };

  function formatDate(dateString) {
    const date = new Date(dateString);
    const day = date.getDate();
    const month = date.getMonth() + 1;
    const year = date.getFullYear();

    // Add leading zeros if needed
    const formattedDay = day < 10 ? `0${day}` : day;
    const formattedMonth = month < 10 ? `0${month}` : month;

    return `${formattedDay}-${formattedMonth}-${year}`;
  }
  const formatter = new Intl.NumberFormat("en-US", {
    style: "decimal",
    minimumFractionDigits: 2,  // Ensures at least 2 digits after the decimal point      
    maximumFractionDigits: 2,  // Ensures no more than 2 digits after the decimal point
  });

  const newFormatter = new Intl.NumberFormat("en-US", {
    style: "decimal",
    minimumFractionDigits: 2,
  });
  const newFormatter3 = new Intl.NumberFormat("en-US", {
    style: "decimal",
    minimumFractionDigits: 3,
  });
  return (
    <div>
      <button onClick={generatePdf}>Generate PDF</button>
    </div>
  );
};

export default QuotationProforma;
